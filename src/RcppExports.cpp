// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// logDensitiesMaxDiff
NumericVector logDensitiesMaxDiff(NumericMatrix e_u, NumericVector weights, bool is_tricked);
RcppExport SEXP _flipMaxDiff_logDensitiesMaxDiff(SEXP e_uSEXP, SEXP weightsSEXP, SEXP is_trickedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type e_u(e_uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_tricked(is_trickedSEXP);
    rcpp_result_gen = Rcpp::wrap(logDensitiesMaxDiff(e_u, weights, is_tricked));
    return rcpp_result_gen;
END_RCPP
}
// logDensityMaxDiff
double logDensityMaxDiff(NumericMatrix e_u, NumericVector weights, bool is_tricked);
RcppExport SEXP _flipMaxDiff_logDensityMaxDiff(SEXP e_uSEXP, SEXP weightsSEXP, SEXP is_trickedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type e_u(e_uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_tricked(is_trickedSEXP);
    rcpp_result_gen = Rcpp::wrap(logDensityMaxDiff(e_u, weights, is_tricked));
    return rcpp_result_gen;
END_RCPP
}
// gradientMaxDiff
NumericVector gradientMaxDiff(NumericMatrix e_u, IntegerMatrix x, NumericVector weights, int n_pars, bool is_tricked);
RcppExport SEXP _flipMaxDiff_gradientMaxDiff(SEXP e_uSEXP, SEXP xSEXP, SEXP weightsSEXP, SEXP n_parsSEXP, SEXP is_trickedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type e_u(e_uSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type n_pars(n_parsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_tricked(is_trickedSEXP);
    rcpp_result_gen = Rcpp::wrap(gradientMaxDiff(e_u, x, weights, n_pars, is_tricked));
    return rcpp_result_gen;
END_RCPP
}
// logKernels
NumericVector logKernels(NumericMatrix beta_draws, IntegerMatrix x, NumericVector weights, bool is_tricked);
RcppExport SEXP _flipMaxDiff_logKernels(SEXP beta_drawsSEXP, SEXP xSEXP, SEXP weightsSEXP, SEXP is_trickedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type beta_draws(beta_drawsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_tricked(is_trickedSEXP);
    rcpp_result_gen = Rcpp::wrap(logKernels(beta_draws, x, weights, is_tricked));
    return rcpp_result_gen;
END_RCPP
}
// sumWeightedOuterProducts
NumericMatrix sumWeightedOuterProducts(NumericMatrix beta_draws, NumericVector weights);
RcppExport SEXP _flipMaxDiff_sumWeightedOuterProducts(SEXP beta_drawsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type beta_draws(beta_drawsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(sumWeightedOuterProducts(beta_draws, weights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flipMaxDiff_logDensitiesMaxDiff", (DL_FUNC) &_flipMaxDiff_logDensitiesMaxDiff, 3},
    {"_flipMaxDiff_logDensityMaxDiff", (DL_FUNC) &_flipMaxDiff_logDensityMaxDiff, 3},
    {"_flipMaxDiff_gradientMaxDiff", (DL_FUNC) &_flipMaxDiff_gradientMaxDiff, 5},
    {"_flipMaxDiff_logKernels", (DL_FUNC) &_flipMaxDiff_logKernels, 4},
    {"_flipMaxDiff_sumWeightedOuterProducts", (DL_FUNC) &_flipMaxDiff_sumWeightedOuterProducts, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_flipMaxDiff(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
